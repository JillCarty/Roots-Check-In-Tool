{"version":3,"sources":["webpack:///./public/js/lost-kids.js"],"names":[],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B,gBAAgB,gBAAgB,KAAK;AAClE;AACA;AACA,aAAY;AACZ;AACA,aAAY;AACZ;AACA;AACA,SAAQ;AACR;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,I;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAI;AACJ;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,K;;AAEA,IAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAE;AACF;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAoB,eAAe;AACnC;AACA;;AAEA;AACA;AACA,QAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAE;;AAEF;AACA;AACA,uCAAsC,oDAAoD;AAC1F;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA,KAAI;AACJ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAE;;AAEF;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAE;;AAEF;AACA;AACA;;AAEA;AACA;AACA;;AAEA,IAAG;AACH;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,KAAI;;AAEJ;;AAEA;AACA,IAAG;;;;;AAKH,GAAE;;AAEF,EAAC","file":"StudentTracker.js","sourcesContent":["// Requires\n\nvar _ = require('lodash');\nvar moment = require('moment');\nvar $ = require('jquery');\n\n// Globals\n\nvar studentsArray = [];\nvar FILTER = 'All'\nvar sort = function (prop, arr) {\n\t\t\t    prop = prop.split('.');\n\t\t\t    var len = prop.length;\n\t\t\t    arr.sort(function (a, b) {\n\t\t\t        var i = 0;\n\t\t\t        while( i < len ) { a = a[prop[i]]; b = b[prop[i]]; i++; }\n\t\t\t        if (a < b) {\n\t\t\t            return -1;\n\t\t\t        } else if (a > b) {\n\t\t\t            return 1;\n\t\t\t        } else {\n\t\t\t            return 0;\n\t\t\t        }\n\t\t\t    });\n\t\t\t    return arr;\n\t\t\t};\n\n// Class of student display\nvar StudentLocationDisplay = function(student) {\n\tthis.data = _.pick(student, ['_id', 'email','name','image','googleId']);\n\t\n\t// Create the DOM element representing the student\n\tvar display = $('<div>').addClass('studentLocationDisplay').addClass('col-md-2').attr('id', student.googleId);\n\tvar container = $('<div>').addClass('nameImageContainer');\n\tcontainer\n\t\t.append('<div class=\"name\">' + student.name + '</div>')\n\t\t.append('<div><img class=\"studentImage\" src=\"' +student.image+'\"></div>');\n\tdisplay.append(container);\n\tdisplay.append('<div class=\"studentInfoContainer\"></div>')\n\tthis.el = display;\n\n\t// Look at the student's recent scan to determine if they are in the correct place or not\n\tif (student.recentScan) {\n\t\tscan = student.recentScan;\n\t\tthis.recentScan = scan;\n\t\t// First, check if the scan is recent (i.e. if that event is still ongoing)\n\t\tvar recent = false;\n\t\tvar event = scan.event ? scan.event[0] : undefined;\n\n\t\t// If google event, check against event end\n\t\tif (event && event.end && moment(event.end).add(TRANSITION_LENGTH, 'ms').isAfter(moment())) {\n\t\t\trecent = true;\n\t\t}\n\t\t// If grove calendar, check against length of events\n\t\telse if (event && !event.end && moment(scan.time).add(EVENT_LENGTH - TRANSITION_LENGTH, 'ms').isAfter(moment())) {\n\t\t\trecent = true;\n\t\t}\n\n\t\t// If the scan is recent\n\t\tif (recent) {\n\t\t\tthis.moveMe(scan);\n\t\t} \n\t\t// If the scan is not recent, student is lost\n\t\telse {\n\t\t\tthis.status = 'Lost';\n\t\t\tthis.currentLocation = 'Lost';\n\t\t\tthis.render('Lost');\n\t\t}\n\t} \n\t// If there is no recent scan at all, student is lost\n\telse {\n\t\tthis.status = 'Lost';\n\t\tthis.currentLocation = 'Lost';\n\t\tthis.render('Lost');\n\t}\n\n};\n\n// Updates student display based on most recent scan / event \nStudentLocationDisplay.prototype.updateDisplay = function() {\n\n\tif (this.status === 'Found') {\n\t\tvar scannedEvent = this.recentScan.event[0];\n\t\tvar text = _.chain(['summary', 'activity', 'focus_area'])\n\t\t\t.map(function(key) {\n\t\t\t\treturn scannedEvent[key];\n\t\t\t})\n\t\t\t.filter()\n\t\t\t.join(' | ')\n\t\t\t.value()\n\n\t\tvar info = $('<p>').addClass('last-scan-info').addClass('text-primary').text(text);\n\n\t\tthis.el.find('.studentInfoContainer').empty().append(info);\n\t\tthis.el.removeClass('Lost').addClass('Found');\n\t}\n\t// If the student is in the wrong location, display the scan information\n\telse if (this.status === 'Wrong Location') {\n\t\tthis.el.removeClass('Found').addClass('Lost');\n\n\t\t// Time of the scan, if we want to display this information\n\t\t// var time = this.recentScan ? moment(this.recentScan.time).fromNow() : '';\n\n\t\tvar info = $('<p>').addClass('last-scan-info').addClass('wrongLocation').text(this.currentLocation);\n\t\tvar correction = $('<p>').addClass('text-primary').addClass('correct-location-info').text(this.recentScan.event[0].location);\n\n\t\tthis.el.find('.studentInfoContainer').empty().append(info, correction);\n\t}\n\t// If the student is lost, do not display the last scan information\n\telse {\n\t\tvar self = this;\n\n\t\t// Call the API endpoint to get current event without a scan\n\t\t$.get('/current-event/' + this.data.googleId, function(result) {\n\t\t\tself.el.removeClass('Found').addClass('Lost');\n\t\t\t\n\t\t\tif(result && result.location) {\n\t\t\t\tvar correction = $('<p>').addClass('correct-location-info').addClass('text-primary').text(result.location);\n\t\t\t\tself.el.find('.studentInfoContainer').empty().append(correction);\n\t\t\t} \n\t\t\t\n\t\t});\n\t}\n};\n\nStudentLocationDisplay.prototype.render = function() {\n\t// render into the dom based on where their location is\n\tvar location;\n\tif (this.status === 'Found') {\n\t\tlocation = this.currentLocation\n\t} else {\n\t\tlocation = 'Lost';\n\t}\n\n\tvar locationId = location.split(' ').join('');\n\tthis.updateDisplay();\n\t$('#'+locationId).append(this.el);\n};\n\n// Move the student to a new location based on the most recent scan\nStudentLocationDisplay.prototype.moveMe = function(scan) {\n\n\tvar self = this;\n\n\t// move from one array to another\n\tif (this.el) {\n\t\tthis.el.remove();\n\t};\n\n\t// If this method was triggered by a scan, update the location to the location of the scan. If it was triggered by a timeout, leave the location as is.\n\tif (scan) {\n\t\tthis.currentLocation = scan.scannedLocation;\n\t}\n\n\tif (scan && scan.correct) {\n\t\tthis.status = 'Found';\n\t\t// Set a timeout based on the end of the event, and move the student to Lost after the event is over as a placeholder until they scan into another event\n\n\t\tvar now = moment( new Date() );\n\t\t\n\t\tif (scan.event.end) {\n\t\t\tvar difference = moment(scan.event.end).subtract( TRANSITION_LENGTH, 'ms').diff( now );\n\t\t}\n\t\telse {\n\t\t\t/* Split the hour based on EVENT_LENGTH and TRANSITION_LENGTH\n\t\t    e.g. if events go for 15 with 5 min transition, 8:55 - 9:10 would\n\t\t    be the period during which the timeout would be set for 9:10 */\n\t\t    var intervals = 60 / (EVENT_LENGTH / (60 * 1000)) + 1;\n\t\t    var start_times = [];\n\t\t    for (var i =0; i < intervals; i++) {\n\t\t      start_times.push( moment( new Date() ).startOf('hour').add(i * EVENT_LENGTH - TRANSITION_LENGTH, 'ms'));\n\t\t    }\n\n\t\t    var event_end = _.find(start_times, function(t) {\n\t\t        return now.isBetween( t, moment(t).add( EVENT_LENGTH, 'ms' ) );\n\t\t    }).add(EVENT_LENGTH, 'ms');\n\n\t\t\t// Push student into lost after event ends and transition time has lapsed\n\t\t\tvar difference = event_end.diff(now);\n\t\t}\n\n\t\tthis.transitionTimeout = window.setTimeout( self.moveMe.bind(self, null), difference);\n\t}\n\t// If the scan does not match the location, the student is in the wrong location\n\telse if (scan) {\n\t\tthis.status = 'Wrong Location';\n\t}\n\t// If there is no scan, this method is being triggered by the timeout, meaning the student has not scanned in to anywhere on time and is lost\n\telse {\n\t\tthis.status = 'Lost';\n\t\tthis.currentLocation = 'Lost';\n\t\tthis.recentScan = null;\n\t}\n\n\t// Now render\n\tself.render();\n};\n\n// When receiving a scan, find the student that matches the scan, move them to a new location based on the scan and clear any possible transitions\nfunction scanReceived(scan) {\n\n\tvar scanStudent = _.find(studentsArray, function(student) {\n\t\treturn student.data.googleId === scan.googleId;\n\t});\n\n\t// If a student is found, move the student and override their recent scan\n\tif (scanStudent) {\n\t\tif (scanStudent.transitionTimeout) { window.clearTimeout(scanStudent.transitionTimeout); }\n\t\tscanStudent.recentScan = scan;\n\t\t// Call the moveMe function, making sure it is bound to the current student\n\t\tscanStudent.moveMe.call(scanStudent, scan);\n\t}\n}\n\n$(function(){\n\t\n\t// Load the different button filters and divs\n\t_.keys(LOCATION_IMAGES).forEach( function(location) {\n\t\t// Manual override for iPad Center to avoid sentence casing\n\t\tif (location.toLowerCase() === 'ipad center') {\n\t\t\tvar prettyDisplay = 'iPad Center';\n\t\t} else {\n\t\t\tvar prettyDisplay = location.split(' ').map( function(word) {\n\t\t\t\treturn word[0].toUpperCase() + word.slice(1);\n\t\t\t}).join(' ');\n\t\t}\n\n\t\t// Create the button and add it to button group\n\t\tvar button = $('<button>').addClass('btn btn-info btn-block').text(prettyDisplay);\n\t\tvar listItem = $('<li>').append(button);\n\t\t$('#location-filters').append(listItem);\n\n\t\t// Create the container for the students\n\t\t// Title is just the location, the container id needs to have spaces removed\n\t\tvar title = $('<h3>').text(prettyDisplay);\n\t\tvar container = $('<div>').addClass('row').attr('id', prettyDisplay.split(' ').join('')).append(title);\n\t\t$('#locations-container').append(container);\n\t});\n\n\t// Attach event handler to the filter buttons\n\t$('#location-filters button').click(function(e) {\n\t\t\n\t\t// Set filter\n\t\tFILTER = $(this).text();\n\n\t\t// Update display\n\t\tif (FILTER === 'All') {\n\t\t\t$('#locations-container > div').show();\n\t\t}\n\t\telse {\n\t\t\t// First, hide all containers\n\t\t\t$('#locations-container > div').hide();\n\n\t\t\t// Then show just the one with id matching the filter (spaces removed from filter)\n\t\t\t$('#' + FILTER.split(' ').join('')).show();\n\t\t}\n\n\t\t// Update the display of the filter buttons by removing primary from all and adding it to this one\n\t\t$('#location-filters button.btn-warning').removeClass('btn-warning').addClass('btn-info');\n\t\t$(this).removeClass('btn-info').addClass('btn-warning');\n\t});\n\n\t// Get AJAX call to User database and get all the students, create StudentLocationDisplay objects for each, and put them in the students array\n\tvar tracker = io.connect();\n\ttracker.on('SCAN!', scanReceived );\n\t\n\t$.get('api/user', function(students) {\n\t\tstudentsArray = _.map(students, function(student) {\n\t\t\treturn new StudentLocationDisplay(student);\n\t\n\t\t});\n\t\tsort('data.name',studentsArray);\n\t\n\t\t// Put in a slight delay for student panels to display, then set them all to same height\n\n\t\twindow.setTimeout(function(){\n\t\t\tvar displays = $('.studentLocationDisplay');\n\n\t\t\tvar heights = displays.map(function() {\n\t\t\t\treturn $(this).height()\n\t\t\t});\n\n\t\t\tvar maxHeight = Math.max.apply(null, heights);\n\n\t\t\tdisplays.height(maxHeight);\n\t\t}, 500);\n\t\n\n\t\n\t\t\n\t});\n\t\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./public/js/lost-kids.js\n ** module id = 0\n ** module chunks = 2\n **/"],"sourceRoot":""}