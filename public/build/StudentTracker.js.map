{"version":3,"sources":["webpack:///StudentTracker.js","webpack:///./public/js/lost-kids.js"],"names":["webpackJsonp","module","exports","__webpack_require__","scanReceived","scan","scanStudent","_","find","studentsArray","student","data","googleId","transitionTimeout","window","clearTimeout","recentScan","moveMe","call","moment","$","FILTER","sort","prop","arr","split","len","length","a","b","i","StudentLocationDisplay","this","pick","display","addClass","attr","container","absentToggle","text","absent","toggle","append","on","toggleAbsent","bind","info","name","image","el","status","updateDisplay","recent","event","undefined","end","add","TRANSITION_LENGTH","isAfter","time","EVENT_LENGTH","prototype","e","preventDefault","self","post","id","scannedEvent","chain","map","key","filter","join","value","empty","removeClass","render","get","result","correction","location","currentLocation","locationId","remove","scannedLocation","correct","now","Date","difference","subtract","diff","intervals","start_times","push","startOf","event_end","t","isBetween","setTimeout","keys","LOCATION_IMAGES","forEach","toLowerCase","prettyDisplay","word","toUpperCase","slice","button","listItem","title","click","show","hide","tracker","io","connect","students","displays","heights","height","maxHeight","Math","max","apply"],"mappings":"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","file":"StudentTracker.js","sourcesContent":["webpackJsonp([2],[\n/* 0 */\n/*!********************************!*\\\n  !*** ./public/js/lost-kids.js ***!\n  \\********************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Requires\n\t\n\tvar _ = __webpack_require__(/*! lodash */ 1);\n\tvar moment = __webpack_require__(/*! moment */ 3);\n\tvar $ = __webpack_require__(/*! jquery */ 90);\n\t\n\t// Globals\n\t\n\tvar studentsArray = [];\n\tvar FILTER = 'All'\n\tvar sort = function (prop, arr) {\n\t\t\t\t    prop = prop.split('.');\n\t\t\t\t    var len = prop.length;\n\t\t\t\t    arr.sort(function (a, b) {\n\t\t\t\t        var i = 0;\n\t\t\t\t        while( i < len ) { a = a[prop[i]]; b = b[prop[i]]; i++; }\n\t\t\t\t        if (a < b) {\n\t\t\t\t            return -1;\n\t\t\t\t        } else if (a > b) {\n\t\t\t\t            return 1;\n\t\t\t\t        } else {\n\t\t\t\t            return 0;\n\t\t\t\t        }\n\t\t\t\t    });\n\t\t\t\t    return arr;\n\t\t\t\t};\n\t\n\t// Class of student display\n\tvar StudentLocationDisplay = function(student) {\n\t\tthis.data = _.pick(student, ['_id', 'email','name','image','googleId', 'absent']);\n\t\t\n\t\t// Create the DOM element representing the student\n\t\tvar display = $('<div>').addClass('studentLocationDisplay').addClass('col-md-2').attr('id', student.googleId);\n\t\tvar container = $('<div>').addClass('nameImageContainer');\n\t\tvar absentToggle = $('<button>').addClass('btn btn-xs btn-primary absent-toggle').text( student.absent ? 'Present' : 'Absent');\n\t\n\t\tvar toggle = $('<div>').append(absentToggle);\n\t\n\t\tabsentToggle.on('click', this.toggleAbsent.bind(this));\n\t\tvar info = $('<div>').addClass('studentInfoContainer')\n\t\n\t\tcontainer\n\t\t\t.append('<div class=\"name\">' + student.name + '</div>')\n\t\t\t.append('<div><img class=\"studentImage\" src=\"' +student.image+'\"></div>');\n\t\n\t\tdisplay.append( container ).append( info ).append( toggle );\n\t\n\t\tthis.el = display;\n\t\n\t\t// If student is absent, no need to mess with any of the below data\n\t\tif (student.absent) {\n\t\t\tthis.status = 'Absent';\n\t\t\tthis.updateDisplay();\n\t\t}\n\t\t// Look at the student's recent scan to determine if they are in the correct place or not\n\t\telse if (student.recentScan) {\n\t\t\tscan = student.recentScan;\n\t\t\tthis.recentScan = scan;\n\t\t\t// First, check if the scan is recent (i.e. if that event is still ongoing)\n\t\t\tvar recent = false;\n\t\t\tvar event = scan.event ? scan.event[0] : undefined;\n\t\n\t\t\t// If google event, check against event end\n\t\t\tif (event && event.end && moment(event.end).add(TRANSITION_LENGTH, 'ms').isAfter(moment())) {\n\t\t\t\trecent = true;\n\t\t\t}\n\t\t\t// If grove calendar, check against length of events\n\t\t\telse if (event && !event.end && moment(scan.time).add(EVENT_LENGTH - TRANSITION_LENGTH, 'ms').isAfter(moment())) {\n\t\t\t\trecent = true;\n\t\t\t}\n\t\n\t\t\t// If the scan is recent\n\t\t\tif (recent) {\n\t\t\t\tthis.moveMe(scan);\n\t\t\t} \n\t\t\t// If the scan is not recent, student is lost\n\t\t\telse {\n\t\t\t\tthis.status = 'Lost';\n\t\t\t\tthis.updateDisplay();\n\t\t\t}\n\t\t} \n\t\t// If there is no recent scan at all, student is lost\n\t\telse {\n\t\t\tthis.status = 'Lost';\n\t\t\tthis.updateDisplay();\n\t\t}\n\t\n\t};\n\t\n\t// Toggles absent / present status\n\tStudentLocationDisplay.prototype.toggleAbsent = function(e) {\n\t\te.preventDefault();\n\t\n\t\tthis.status = this.status === 'Absent' ? 'Lost' : 'Absent';\n\t\n\t\tvar self = this;\n\t\n\t\t$.post( '/api/user/', { id: this.data.googleId, absent: !this.data.absent }, self.updateDisplay.bind(self) );\n\t}\n\t\n\t// Updates student display based on most recent scan / event \n\tStudentLocationDisplay.prototype.updateDisplay = function() {\n\t\n\t\tif (this.status != 'Absent') {\n\t\t\tthis.el.find('.absent-toggle').text('Absent');\n\t\t}\n\t\n\t\tif (this.status === 'Found') {\n\t\t\tvar scannedEvent = this.recentScan.event[0];\n\t\t\tvar text = _.chain(['summary', 'activity', 'focus_area'])\n\t\t\t\t.map(function(key) {\n\t\t\t\t\treturn scannedEvent[key];\n\t\t\t\t})\n\t\t\t\t.filter()\n\t\t\t\t.join(' | ')\n\t\t\t\t.value()\n\t\n\t\t\tvar info = $('<p>').addClass('last-scan-info').addClass('text-primary').text(text);\n\t\n\t\t\tthis.el.find('.studentInfoContainer').empty().append(info);\n\t\t\tthis.el.removeClass('Lost').addClass('Found');\n\t\t\tthis.render();\n\t\t}\n\t\t// If the student is lost, do not display the last scan information\n\t\telse if (this.status === 'Lost') {\n\t\t\tvar self = this;\n\t\n\t\t\t// Call the API endpoint to get current event without a scan\n\t\t\t$.get('/current-event/' + this.data.googleId, function(result) {\n\t\t\t\tself.el.removeClass('Found').addClass('Lost');\n\t\t\t\t\n\t\t\t\tvar correction = $('<p>').addClass('correct-location-info').addClass('text-primary').text(result.location);\n\t\t\t\tself.el.find('.studentInfoContainer').empty().append(correction);\n\t\t\t\tself.currentLocation = result && result.location || 'No Event';\n\t\n\t\t\t\tself.render()\n\t\t\t\t\n\t\t\t});\n\t\t} else if (this.status === 'Absent') {\n\t\t\tthis.el.removeClass('Found').addClass('Lost');\n\t\t\tthis.currentLocation = 'Absent';\n\t\t\tthis.el.find('.absent-toggle').text('Present');\n\t\t\tthis.render()\n\t\t}\n\t};\n\t\n\tStudentLocationDisplay.prototype.render = function() {\n\t\t// render into the dom based on where their location is\n\t\tvar locationId = this.currentLocation.split(' ').join('');\n\t\t$('#'+locationId).append(this.el);\n\t};\n\t\n\t// Move the student to a new location based on the most recent scan\n\tStudentLocationDisplay.prototype.moveMe = function(scan) {\n\t\n\t\tvar self = this;\n\t\n\t\t// move from one array to another\n\t\tif (this.el) {\n\t\t\tthis.el.remove();\n\t\t};\n\t\n\t\t// If this method was triggered by a scan, update the location to the location of the scan. If it was triggered by a timeout, leave the location as is.\n\t\tif (scan) {\n\t\t\tthis.currentLocation = scan.scannedLocation;\n\t\t}\n\t\n\t\tif (scan && scan.correct) {\n\t\t\tthis.status = 'Found';\n\t\t\t// Set a timeout based on the end of the event, and move the student to Lost after the event is over as a placeholder until they scan into another event\n\t\n\t\t\tvar now = moment( new Date() );\n\t\t\t\n\t\t\tif (scan.event.end) {\n\t\t\t\tvar difference = moment(scan.event.end).subtract( TRANSITION_LENGTH, 'ms').diff( now );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t/* Split the hour based on EVENT_LENGTH and TRANSITION_LENGTH\n\t\t\t    e.g. if events go for 15 with 5 min transition, 8:55 - 9:10 would\n\t\t\t    be the period during which the timeout would be set for 9:10 */\n\t\t\t    var intervals = 60 / (EVENT_LENGTH / (60 * 1000)) + 1;\n\t\t\t    var start_times = [];\n\t\t\t    for (var i =0; i < intervals; i++) {\n\t\t\t      start_times.push( moment( new Date() ).startOf('hour').add(i * EVENT_LENGTH - TRANSITION_LENGTH, 'ms'));\n\t\t\t    }\n\t\n\t\t\t    var event_end = _.find(start_times, function(t) {\n\t\t\t        return now.isBetween( t, moment(t).add( EVENT_LENGTH, 'ms' ) );\n\t\t\t    }).add(EVENT_LENGTH, 'ms');\n\t\n\t\t\t\t// Push student into lost after event ends and transition time has lapsed\n\t\t\t\tvar difference = event_end.diff(now);\n\t\t\t}\n\t\n\t\t\tthis.transitionTimeout = window.setTimeout( self.moveMe.bind(self, null), difference);\n\t\t}\n\t\t// If the scan does not match the location, the student is in the wrong location\n\t\telse if (scan) {\n\t\t\tthis.status = 'Lost';\n\t\t}\n\t\t// If there is no scan, this method is being triggered by the timeout, meaning the student has not scanned in to anywhere on time and is lost\n\t\t// We need to get the student's next event and move them accordingly\n\t\telse {\n\t\t\tthis.status = 'Lost';\n\t\t\tthis.currentLocation = 'Lost';\n\t\t\tthis.recentScan = null;\n\t\t}\n\t\n\t\t// Now updateDisplay()self.updateDisplay();\n\t};\n\t\n\t// When receiving a scan, find the student that matches the scan, move them to a new location based on the scan and clear any possible transitions\n\tfunction scanReceived(scan) {\n\t\n\t\tvar scanStudent = _.find(studentsArray, function(student) {\n\t\t\treturn student.data.googleId === scan.googleId;\n\t\t});\n\t\n\t\t// If a student is found, move the student and override their recent scan\n\t\tif (scanStudent) {\n\t\t\tif (scanStudent.transitionTimeout) { window.clearTimeout(scanStudent.transitionTimeout); }\n\t\t\tscanStudent.recentScan = scan;\n\t\t\t// Call the moveMe function, making sure it is bound to the current student\n\t\t\tscanStudent.moveMe.call(scanStudent, scan);\n\t\t}\n\t}\n\t\n\t$(function(){\n\t\t\n\t\t// Load the different button filters and divs\n\t\t_.keys(LOCATION_IMAGES).forEach( function(location) {\n\t\t\t// Manual override for iPad Center to avoid sentence casing\n\t\t\tif (location.toLowerCase() === 'ipad center') {\n\t\t\t\tvar prettyDisplay = 'iPad Center';\n\t\t\t} else {\n\t\t\t\tvar prettyDisplay = location.split(' ').map( function(word) {\n\t\t\t\t\treturn word[0].toUpperCase() + word.slice(1);\n\t\t\t\t}).join(' ');\n\t\t\t}\n\t\n\t\t\t// Create the button and add it to button group\n\t\t\tvar button = $('<button>').addClass('btn btn-info btn-block').text(prettyDisplay);\n\t\t\tvar listItem = $('<li>').append(button);\n\t\t\t$('#location-filters').append(listItem);\n\t\n\t\t\t// Create the container for the students\n\t\t\t// Title is just the location, the container id needs to have spaces removed\n\t\t\tvar title = $('<h3>').text(prettyDisplay);\n\t\t\tvar container = $('<div>').addClass('row').attr('id', prettyDisplay.split(' ').join('')).append(title);\n\t\t\t$('#locations-container').append(container);\n\t\t});\n\t\n\t\t// Attach event handler to the filter buttons\n\t\t$('#location-filters button').click(function(e) {\n\t\t\t\n\t\t\t// Set filter\n\t\t\tFILTER = $(this).text();\n\t\n\t\t\t// Update display\n\t\t\tif (FILTER === 'All') {\n\t\t\t\t$('#locations-container > div').show();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// First, hide all containers\n\t\t\t\t$('#locations-container > div').hide();\n\t\n\t\t\t\t// Then show just the one with id matching the filter (spaces removed from filter)\n\t\t\t\t$('#' + FILTER.split(' ').join('')).show();\n\t\t\t}\n\t\n\t\t\t// Update the display of the filter buttons by removing primary from all and adding it to this one\n\t\t\t$('#location-filters button.btn-warning').removeClass('btn-warning').addClass('btn-info');\n\t\t\t$(this).removeClass('btn-info').addClass('btn-warning');\n\t\t});\n\t\n\t\t// Get AJAX call to User database and get all the students, create StudentLocationDisplay objects for each, and put them in the students array\n\t\tvar tracker = io.connect();\n\t\ttracker.on('SCAN!', scanReceived );\n\t\t\n\t\t$.get('api/user', function(students) {\n\t\t\tstudentsArray = _.map(students, function(student) {\n\t\t\t\treturn new StudentLocationDisplay(student);\n\t\t\t});\n\t\t\tsort('data.name',studentsArray);\n\t\t\n\t\t\t// Put in a slight delay for student panels to display, then set them all to same height\n\t\n\t\t\twindow.setTimeout(function(){\n\t\t\t\tvar displays = $('.studentLocationDisplay');\n\t\n\t\t\t\tvar heights = displays.map(function() {\n\t\t\t\t\treturn $(this).height()\n\t\t\t\t});\n\t\n\t\t\t\tvar maxHeight = Math.max.apply(null, heights);\n\t\n\t\t\t\tdisplays.height(maxHeight);\n\t\t\t}, 500);\n\t\t\n\t\n\t\t\n\t\t\t\n\t\t});\n\t\t\n\t});\n\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** StudentTracker.js\n **/","// Requires\n\nvar _ = require('lodash');\nvar moment = require('moment');\nvar $ = require('jquery');\n\n// Globals\n\nvar studentsArray = [];\nvar FILTER = 'All'\nvar sort = function (prop, arr) {\n\t\t\t    prop = prop.split('.');\n\t\t\t    var len = prop.length;\n\t\t\t    arr.sort(function (a, b) {\n\t\t\t        var i = 0;\n\t\t\t        while( i < len ) { a = a[prop[i]]; b = b[prop[i]]; i++; }\n\t\t\t        if (a < b) {\n\t\t\t            return -1;\n\t\t\t        } else if (a > b) {\n\t\t\t            return 1;\n\t\t\t        } else {\n\t\t\t            return 0;\n\t\t\t        }\n\t\t\t    });\n\t\t\t    return arr;\n\t\t\t};\n\n// Class of student display\nvar StudentLocationDisplay = function(student) {\n\tthis.data = _.pick(student, ['_id', 'email','name','image','googleId', 'absent']);\n\t\n\t// Create the DOM element representing the student\n\tvar display = $('<div>').addClass('studentLocationDisplay').addClass('col-md-2').attr('id', student.googleId);\n\tvar container = $('<div>').addClass('nameImageContainer');\n\tvar absentToggle = $('<button>').addClass('btn btn-xs btn-primary absent-toggle').text( student.absent ? 'Present' : 'Absent');\n\n\tvar toggle = $('<div>').append(absentToggle);\n\n\tabsentToggle.on('click', this.toggleAbsent.bind(this));\n\tvar info = $('<div>').addClass('studentInfoContainer')\n\n\tcontainer\n\t\t.append('<div class=\"name\">' + student.name + '</div>')\n\t\t.append('<div><img class=\"studentImage\" src=\"' +student.image+'\"></div>');\n\n\tdisplay.append( container ).append( info ).append( toggle );\n\n\tthis.el = display;\n\n\t// If student is absent, no need to mess with any of the below data\n\tif (student.absent) {\n\t\tthis.status = 'Absent';\n\t\tthis.updateDisplay();\n\t}\n\t// Look at the student's recent scan to determine if they are in the correct place or not\n\telse if (student.recentScan) {\n\t\tscan = student.recentScan;\n\t\tthis.recentScan = scan;\n\t\t// First, check if the scan is recent (i.e. if that event is still ongoing)\n\t\tvar recent = false;\n\t\tvar event = scan.event ? scan.event[0] : undefined;\n\n\t\t// If google event, check against event end\n\t\tif (event && event.end && moment(event.end).add(TRANSITION_LENGTH, 'ms').isAfter(moment())) {\n\t\t\trecent = true;\n\t\t}\n\t\t// If grove calendar, check against length of events\n\t\telse if (event && !event.end && moment(scan.time).add(EVENT_LENGTH - TRANSITION_LENGTH, 'ms').isAfter(moment())) {\n\t\t\trecent = true;\n\t\t}\n\n\t\t// If the scan is recent\n\t\tif (recent) {\n\t\t\tthis.moveMe(scan);\n\t\t} \n\t\t// If the scan is not recent, student is lost\n\t\telse {\n\t\t\tthis.status = 'Lost';\n\t\t\tthis.updateDisplay();\n\t\t}\n\t} \n\t// If there is no recent scan at all, student is lost\n\telse {\n\t\tthis.status = 'Lost';\n\t\tthis.updateDisplay();\n\t}\n\n};\n\n// Toggles absent / present status\nStudentLocationDisplay.prototype.toggleAbsent = function(e) {\n\te.preventDefault();\n\n\tthis.status = this.status === 'Absent' ? 'Lost' : 'Absent';\n\n\tvar self = this;\n\n\t$.post( '/api/user/', { id: this.data.googleId, absent: !this.data.absent }, self.updateDisplay.bind(self) );\n}\n\n// Updates student display based on most recent scan / event \nStudentLocationDisplay.prototype.updateDisplay = function() {\n\n\tif (this.status != 'Absent') {\n\t\tthis.el.find('.absent-toggle').text('Absent');\n\t}\n\n\tif (this.status === 'Found') {\n\t\tvar scannedEvent = this.recentScan.event[0];\n\t\tvar text = _.chain(['summary', 'activity', 'focus_area'])\n\t\t\t.map(function(key) {\n\t\t\t\treturn scannedEvent[key];\n\t\t\t})\n\t\t\t.filter()\n\t\t\t.join(' | ')\n\t\t\t.value()\n\n\t\tvar info = $('<p>').addClass('last-scan-info').addClass('text-primary').text(text);\n\n\t\tthis.el.find('.studentInfoContainer').empty().append(info);\n\t\tthis.el.removeClass('Lost').addClass('Found');\n\t\tthis.render();\n\t}\n\t// If the student is lost, do not display the last scan information\n\telse if (this.status === 'Lost') {\n\t\tvar self = this;\n\n\t\t// Call the API endpoint to get current event without a scan\n\t\t$.get('/current-event/' + this.data.googleId, function(result) {\n\t\t\tself.el.removeClass('Found').addClass('Lost');\n\t\t\t\n\t\t\tvar correction = $('<p>').addClass('correct-location-info').addClass('text-primary').text(result.location);\n\t\t\tself.el.find('.studentInfoContainer').empty().append(correction);\n\t\t\tself.currentLocation = result && result.location || 'No Event';\n\n\t\t\tself.render()\n\t\t\t\n\t\t});\n\t} else if (this.status === 'Absent') {\n\t\tthis.el.removeClass('Found').addClass('Lost');\n\t\tthis.currentLocation = 'Absent';\n\t\tthis.el.find('.absent-toggle').text('Present');\n\t\tthis.render()\n\t}\n};\n\nStudentLocationDisplay.prototype.render = function() {\n\t// render into the dom based on where their location is\n\tvar locationId = this.currentLocation.split(' ').join('');\n\t$('#'+locationId).append(this.el);\n};\n\n// Move the student to a new location based on the most recent scan\nStudentLocationDisplay.prototype.moveMe = function(scan) {\n\n\tvar self = this;\n\n\t// move from one array to another\n\tif (this.el) {\n\t\tthis.el.remove();\n\t};\n\n\t// If this method was triggered by a scan, update the location to the location of the scan. If it was triggered by a timeout, leave the location as is.\n\tif (scan) {\n\t\tthis.currentLocation = scan.scannedLocation;\n\t}\n\n\tif (scan && scan.correct) {\n\t\tthis.status = 'Found';\n\t\t// Set a timeout based on the end of the event, and move the student to Lost after the event is over as a placeholder until they scan into another event\n\n\t\tvar now = moment( new Date() );\n\t\t\n\t\tif (scan.event.end) {\n\t\t\tvar difference = moment(scan.event.end).subtract( TRANSITION_LENGTH, 'ms').diff( now );\n\t\t}\n\t\telse {\n\t\t\t/* Split the hour based on EVENT_LENGTH and TRANSITION_LENGTH\n\t\t    e.g. if events go for 15 with 5 min transition, 8:55 - 9:10 would\n\t\t    be the period during which the timeout would be set for 9:10 */\n\t\t    var intervals = 60 / (EVENT_LENGTH / (60 * 1000)) + 1;\n\t\t    var start_times = [];\n\t\t    for (var i =0; i < intervals; i++) {\n\t\t      start_times.push( moment( new Date() ).startOf('hour').add(i * EVENT_LENGTH - TRANSITION_LENGTH, 'ms'));\n\t\t    }\n\n\t\t    var event_end = _.find(start_times, function(t) {\n\t\t        return now.isBetween( t, moment(t).add( EVENT_LENGTH, 'ms' ) );\n\t\t    }).add(EVENT_LENGTH, 'ms');\n\n\t\t\t// Push student into lost after event ends and transition time has lapsed\n\t\t\tvar difference = event_end.diff(now);\n\t\t}\n\n\t\tthis.transitionTimeout = window.setTimeout( self.moveMe.bind(self, null), difference);\n\t}\n\t// If the scan does not match the location, the student is in the wrong location\n\telse if (scan) {\n\t\tthis.status = 'Lost';\n\t}\n\t// If there is no scan, this method is being triggered by the timeout, meaning the student has not scanned in to anywhere on time and is lost\n\t// We need to get the student's next event and move them accordingly\n\telse {\n\t\tthis.status = 'Lost';\n\t\tthis.currentLocation = 'Lost';\n\t\tthis.recentScan = null;\n\t}\n\n\t// Now updateDisplay()self.updateDisplay();\n};\n\n// When receiving a scan, find the student that matches the scan, move them to a new location based on the scan and clear any possible transitions\nfunction scanReceived(scan) {\n\n\tvar scanStudent = _.find(studentsArray, function(student) {\n\t\treturn student.data.googleId === scan.googleId;\n\t});\n\n\t// If a student is found, move the student and override their recent scan\n\tif (scanStudent) {\n\t\tif (scanStudent.transitionTimeout) { window.clearTimeout(scanStudent.transitionTimeout); }\n\t\tscanStudent.recentScan = scan;\n\t\t// Call the moveMe function, making sure it is bound to the current student\n\t\tscanStudent.moveMe.call(scanStudent, scan);\n\t}\n}\n\n$(function(){\n\t\n\t// Load the different button filters and divs\n\t_.keys(LOCATION_IMAGES).forEach( function(location) {\n\t\t// Manual override for iPad Center to avoid sentence casing\n\t\tif (location.toLowerCase() === 'ipad center') {\n\t\t\tvar prettyDisplay = 'iPad Center';\n\t\t} else {\n\t\t\tvar prettyDisplay = location.split(' ').map( function(word) {\n\t\t\t\treturn word[0].toUpperCase() + word.slice(1);\n\t\t\t}).join(' ');\n\t\t}\n\n\t\t// Create the button and add it to button group\n\t\tvar button = $('<button>').addClass('btn btn-info btn-block').text(prettyDisplay);\n\t\tvar listItem = $('<li>').append(button);\n\t\t$('#location-filters').append(listItem);\n\n\t\t// Create the container for the students\n\t\t// Title is just the location, the container id needs to have spaces removed\n\t\tvar title = $('<h3>').text(prettyDisplay);\n\t\tvar container = $('<div>').addClass('row').attr('id', prettyDisplay.split(' ').join('')).append(title);\n\t\t$('#locations-container').append(container);\n\t});\n\n\t// Attach event handler to the filter buttons\n\t$('#location-filters button').click(function(e) {\n\t\t\n\t\t// Set filter\n\t\tFILTER = $(this).text();\n\n\t\t// Update display\n\t\tif (FILTER === 'All') {\n\t\t\t$('#locations-container > div').show();\n\t\t}\n\t\telse {\n\t\t\t// First, hide all containers\n\t\t\t$('#locations-container > div').hide();\n\n\t\t\t// Then show just the one with id matching the filter (spaces removed from filter)\n\t\t\t$('#' + FILTER.split(' ').join('')).show();\n\t\t}\n\n\t\t// Update the display of the filter buttons by removing primary from all and adding it to this one\n\t\t$('#location-filters button.btn-warning').removeClass('btn-warning').addClass('btn-info');\n\t\t$(this).removeClass('btn-info').addClass('btn-warning');\n\t});\n\n\t// Get AJAX call to User database and get all the students, create StudentLocationDisplay objects for each, and put them in the students array\n\tvar tracker = io.connect();\n\ttracker.on('SCAN!', scanReceived );\n\t\n\t$.get('api/user', function(students) {\n\t\tstudentsArray = _.map(students, function(student) {\n\t\t\treturn new StudentLocationDisplay(student);\n\t\t});\n\t\tsort('data.name',studentsArray);\n\t\n\t\t// Put in a slight delay for student panels to display, then set them all to same height\n\n\t\twindow.setTimeout(function(){\n\t\t\tvar displays = $('.studentLocationDisplay');\n\n\t\t\tvar heights = displays.map(function() {\n\t\t\t\treturn $(this).height()\n\t\t\t});\n\n\t\t\tvar maxHeight = Math.max.apply(null, heights);\n\n\t\t\tdisplays.height(maxHeight);\n\t\t}, 500);\n\t\n\n\t\n\t\t\n\t});\n\t\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./public/js/lost-kids.js\n ** module id = 0\n ** module chunks = 2\n **/"],"sourceRoot":""}