{"version":3,"sources":["webpack:///StudentTracker.js","webpack:///./public/js/lost-kids.js"],"names":["webpackJsonp","module","exports","__webpack_require__","sortByNameAndStatus","a","b","an","$","attr","bn","hasClass","scanReceived","scan","scanStudent","_","find","studentsArray","student","data","googleId","transitionTimeout","window","clearTimeout","recentScan","moveMe","call","moment","FILTER","StudentLocationDisplay","this","pick","display","addClass","name","container","absentToggle","text","absent","toggle","append","info","image","on","toggleAbsent","bind","el","status","updateDisplay","recent","event","undefined","end","add","TRANSITION_LENGTH","isAfter","time","EVENT_LENGTH","prototype","e","preventDefault","self","post","id","scannedEvent","chain","map","key","filter","join","value","empty","removeClass","render","get","result","correction","location","currentLocation","locationId","split","locationArray","sort","detach","appendTo","off","remove","scannedLocation","correct","now","Date","difference","subtract","diff","intervals","start_times","i","push","startOf","event_end","t","isBetween","setTimeout","keys","LOCATION_IMAGES","concat","forEach","toLowerCase","prettyDisplay","word","toUpperCase","slice","button","listItem","title","click","show","hide","tracker","io","connect","students","ajax","type","contentType","JSON","stringify"],"mappings":"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","file":"StudentTracker.js","sourcesContent":["webpackJsonp([2],[\n/* 0 */\n/*!********************************!*\\\n  !*** ./public/js/lost-kids.js ***!\n  \\********************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Requires\n\t\n\tvar _ = __webpack_require__(/*! lodash */ 1);\n\tvar moment = __webpack_require__(/*! moment */ 3);\n\tvar $ = __webpack_require__(/*! jquery */ 90);\n\t\n\t// Globals\n\t\n\tvar studentsArray = [];\n\tvar FILTER = 'All'\n\tfunction sortByNameAndStatus(a, b) {\n\t\tvar an = $(a).attr('data-name'), bn = $(b).attr('data-name');\n\t\n\t\treturn $(b).hasClass('Found') - $(a).hasClass('Found') || (an > bn) - 1 || 1; \n\t};\n\t\n\t// Class of student display\n\tvar StudentLocationDisplay = function(student) {\n\t\tthis.data = _.pick(student, ['_id', 'email','name','image','googleId', 'absent']);\n\t\t\n\t\t// Create the DOM element representing the student\n\t\tvar display = $('<div>').addClass('studentLocationDisplay').addClass('col-md-2').attr('id', student.googleId).attr('data-name', student.name);\n\t\tvar container = $('<div>').addClass('nameImageContainer');\n\t\tvar absentToggle = $('<button>').addClass('btn btn-xs btn-primary absent-toggle').text( student.absent ? 'Present' : 'Absent');\n\t\n\t\tvar toggle = $('<div>').append(absentToggle);\n\t\n\t\tvar info = $('<div>').addClass('studentInfoContainer')\n\t\n\t\tcontainer\n\t\t\t.append('<div class=\"name\">' + student.name + '</div>')\n\t\t\t.append('<div><img class=\"studentImage\" src=\"' +student.image+'\"></div>');\n\t\n\t\tdisplay.append( container ).append( info ).append( toggle );\n\t\t\n\t\tabsentToggle.on('click', this.toggleAbsent.bind(this));\n\t\n\t\tthis.el = display;\n\t\n\t\t// If student is absent, no need to mess with any of the below data\n\t\tif (student.absent) {\n\t\t\tthis.status = 'Absent';\n\t\t\tthis.updateDisplay();\n\t\t}\n\t\t// Look at the student's recent scan to determine if they are in the correct place or not\n\t\telse if (student.recentScan) {\n\t\t\tscan = student.recentScan;\n\t\t\tthis.recentScan = scan;\n\t\t\t// First, check if the scan is recent (i.e. if that event is still ongoing)\n\t\t\tvar recent = false;\n\t\t\tvar event = scan.event ? scan.event[0] : undefined;\n\t\n\t\t\t// If google event, check against event end\n\t\t\tif (event && event.end && moment(event.end).add(TRANSITION_LENGTH, 'ms').isAfter(moment())) {\n\t\t\t\trecent = true;\n\t\t\t}\n\t\t\t// If grove calendar, check against length of events\n\t\t\telse if (event && !event.end && moment(scan.time).add(EVENT_LENGTH - TRANSITION_LENGTH, 'ms').isAfter(moment())) {\n\t\t\t\trecent = true;\n\t\t\t}\n\t\n\t\t\t// If the scan is recent\n\t\t\tif (recent) {\n\t\t\t\tthis.moveMe(scan);\n\t\t\t} \n\t\t\t// If the scan is not recent, student is lost\n\t\t\telse {\n\t\t\t\tthis.status = 'Lost';\n\t\t\t\tthis.updateDisplay();\n\t\t\t}\n\t\t} \n\t\t// If there is no recent scan at all, student is lost\n\t\telse {\n\t\t\tthis.status = 'Lost';\n\t\t\tthis.updateDisplay();\n\t\t}\n\t\n\t};\n\t\n\t// Toggles absent / present status\n\tStudentLocationDisplay.prototype.toggleAbsent = function(e) {\n\t\te.preventDefault();\n\t\n\t\tthis.status = this.status === 'Absent' ? 'Lost' : 'Absent';\n\t\n\t\tvar self = this;\n\t\n\t\t$.post( '/api/user/', { id: this.data.googleId, absent: !this.data.absent }, self.updateDisplay.bind(self) );\n\t}\n\t\n\t// Updates student display based on most recent scan / event \n\tStudentLocationDisplay.prototype.updateDisplay = function() {\n\t\n\t\tif (this.status != 'Absent') {\n\t\t\tthis.el.find('.absent-toggle').text('Absent');\n\t\t}\n\t\n\t\tif (this.status === 'Found') {\n\t\t\tvar scannedEvent = this.recentScan.event[0];\n\t\t\tvar text = _.chain(['summary', 'activity', 'focus_area'])\n\t\t\t\t.map(function(key) {\n\t\t\t\t\treturn scannedEvent[key];\n\t\t\t\t})\n\t\t\t\t.filter()\n\t\t\t\t.join(' | ')\n\t\t\t\t.value()\n\t\n\t\t\tvar info = $('<p>').addClass('last-scan-info').addClass('text-primary').text(text);\n\t\n\t\t\tthis.el.find('.studentInfoContainer').empty().append(info);\n\t\t\tthis.el.removeClass('Lost').addClass('Found');\n\t\t\tthis.render();\n\t\t}\n\t\t// If the student is lost, do not display the last scan information\n\t\telse if (this.status === 'Lost') {\n\t\t\tvar self = this;\n\t\n\t\t\t// Call the API endpoint to get current event without a scan\n\t\t\t$.get('/current-event/' + this.data.googleId, function(result) {\n\t\t\t\tself.el.removeClass('Found').addClass('Lost');\n\t\t\t\t\n\t\t\t\tvar correction = $('<p>').addClass('correct-location-info').addClass('text-primary').text(result.location);\n\t\t\t\tself.el.find('.studentInfoContainer').empty().append(correction);\n\t\t\t\tself.currentLocation = result && result.location || 'No Event';\n\t\n\t\t\t\tself.render()\n\t\t\t\t\n\t\t\t});\n\t\t} else if (this.status === 'Absent') {\n\t\t\tthis.el.removeClass('Found').addClass('Lost');\n\t\t\tthis.currentLocation = 'Absent';\n\t\t\tthis.el.find('.absent-toggle').text('Present');\n\t\t\tthis.render()\n\t\t}\n\t};\n\t\n\tStudentLocationDisplay.prototype.render = function() {\n\t\t// render into the dom based on where their location is\n\t\tvar locationId = this.currentLocation.split(' ').join('');\n\t\tvar location = $('#'+locationId)\n\t\tlocation.append(this.el);\n\t\n\t\tvar locationArray = location.find('.studentLocationDisplay').sort( sortByNameAndStatus );\n\t\n\t\tlocationArray.detach().appendTo( location );\n\t\n\t\t// Re-attach the absent click handler, was getting a strange bug where it did not always fire otherwise\n\t\tthis.el.find('.absent-toggle').off('click').on('click', this.toggleAbsent.bind(this) )\n\t};\n\t\n\t// Move the student to a new location based on the most recent scan\n\tStudentLocationDisplay.prototype.moveMe = function(scan) {\n\t\n\t\tvar self = this;\n\t\n\t\t// move from one array to another\n\t\tif (this.el) {\n\t\t\tthis.el.remove();\n\t\t};\n\t\n\t\t// If this method was triggered by a scan, update the location to the location of the scan. If it was triggered by a timeout, leave the location as is.\n\t\tif (scan) {\n\t\t\tthis.currentLocation = scan.scannedLocation;\n\t\t}\n\t\n\t\tif (scan && scan.correct) {\n\t\t\tthis.status = 'Found';\n\t\t\t// Set a timeout based on the end of the event, and move the student to Lost after the event is over as a placeholder until they scan into another event\n\t\n\t\t\tvar now = moment( new Date() );\n\t\t\t\n\t\t\tif (scan.event.end) {\n\t\t\t\tvar difference = moment(scan.event.end).subtract( TRANSITION_LENGTH, 'ms').diff( now );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t/* Split the hour based on EVENT_LENGTH and TRANSITION_LENGTH\n\t\t\t    e.g. if events go for 15 with 5 min transition, 8:55 - 9:10 would\n\t\t\t    be the period during which the timeout would be set for 9:10 */\n\t\t\t    var intervals = 60 / (EVENT_LENGTH / (60 * 1000)) + 1;\n\t\t\t    var start_times = [];\n\t\t\t    for (var i =0; i < intervals; i++) {\n\t\t\t      start_times.push( moment( new Date() ).startOf('hour').add(i * EVENT_LENGTH - TRANSITION_LENGTH, 'ms'));\n\t\t\t    }\n\t\n\t\t\t    var event_end = _.find(start_times, function(t) {\n\t\t\t        return now.isBetween( t, moment(t).add( EVENT_LENGTH, 'ms' ) );\n\t\t\t    }).add(EVENT_LENGTH, 'ms');\n\t\n\t\t\t\t// Push student into lost after event ends and transition time has lapsed\n\t\t\t\tvar difference = event_end.diff(now);\n\t\t\t}\n\t\n\t\t\tthis.transitionTimeout = window.setTimeout( self.moveMe.bind(self, null), difference);\n\t\t}\n\t\t// If the scan does not match the location, the student is in the wrong location\n\t\telse if (scan) {\n\t\t\tthis.status = 'Lost';\n\t\t}\n\t\t// If there is no scan, this method is being triggered by the timeout, meaning the student has not scanned in to anywhere on time and is lost\n\t\t// We need to get the student's next event and move them accordingly\n\t\telse {\n\t\t\tthis.status = 'Lost';\n\t\t\tthis.recentScan = null;\n\t\t}\n\t\n\t\t// Now updateDisplay\n\t\tself.updateDisplay();\n\t};\n\t\n\t// When receiving a scan, find the student that matches the scan, move them to a new location based on the scan and clear any possible transitions\n\tfunction scanReceived(scan) {\n\t\n\t\tvar scanStudent = _.find(studentsArray, function(student) {\n\t\t\treturn student.data.googleId === scan.googleId;\n\t\t});\n\t\n\t\t// If a student is found, move the student and override their recent scan\n\t\tif (scanStudent) {\n\t\t\tif (scanStudent.transitionTimeout) { window.clearTimeout(scanStudent.transitionTimeout); }\n\t\t\tscanStudent.recentScan = scan;\n\t\t\t// Call the moveMe function, making sure it is bound to the current student\n\t\t\tscanStudent.moveMe.call(scanStudent, scan);\n\t\t}\n\t}\n\t\n\t$(function(){\n\t\t// Load the different button filters and divs\n\t\t_.keys(LOCATION_IMAGES).concat('Absent').forEach( function(location) {\n\t\t\t// Manual override for iPad Center to avoid sentence casing\n\t\t\tif (location.toLowerCase() === 'ipad center') {\n\t\t\t\tvar prettyDisplay = 'iPad Center';\n\t\t\t} else {\n\t\t\t\tvar prettyDisplay = location.split(' ').map( function(word) {\n\t\t\t\t\treturn word[0].toUpperCase() + word.slice(1);\n\t\t\t\t}).join(' ');\n\t\t\t}\n\t\n\t\t\t// Create the button and add it to button group\n\t\t\tvar button = $('<button>').addClass('btn btn-info btn-block').text(prettyDisplay);\n\t\t\tvar listItem = $('<li>').append(button);\n\t\t\t$('#location-filters').append(listItem);\n\t\n\t\t\t// Create the container for the students\n\t\t\t// Title is just the location, the container id needs to have spaces removed\n\t\t\tvar title = $('<h3>').text(prettyDisplay);\n\t\t\tvar container = $('<div>').addClass('row').attr('id', prettyDisplay.split(' ').join('')).append(title);\n\t\t\t$('#locations-container').append(container);\n\t\t});\n\t\n\t\t// Attach event handler to the filter buttons\n\t\t$('#location-filters button').click(function(e) {\n\t\t\t\n\t\t\t// Set filter\n\t\t\tFILTER = $(this).text();\n\t\n\t\t\t// Update display\n\t\t\tif (FILTER === 'All') {\n\t\t\t\t$('#locations-container > div').show();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// First, hide all containers\n\t\t\t\t$('#locations-container > div').hide();\n\t\n\t\t\t\t// Then show just the one with id matching the filter (spaces removed from filter)\n\t\t\t\t$('#' + FILTER.split(' ').join('')).show();\n\t\t\t}\n\t\n\t\t\t// Update the display of the filter buttons by removing primary from all and adding it to this one\n\t\t\t$('#location-filters button.btn-warning').removeClass('btn-warning').addClass('btn-info');\n\t\t\t$(this).removeClass('btn-info').addClass('btn-warning');\n\t\t});\n\t\n\t\t// Get AJAX call to User database and get all the students, create StudentLocationDisplay objects for each, and put them in the students array\n\t\tvar tracker = io.connect();\n\t\ttracker.on('SCAN!', scanReceived );\n\t\t\n\t\t$.get('api/user', function(students) {\n\t\t\tstudentsArray = _.map(students, function(student) {\n\t\t\t\treturn new StudentLocationDisplay(student);\n\t\t\t});\n\t\t\t\n\t\t\t// Put in a slight delay for student panels to display, then set them all to same height (don't need this with css changes, but keeping it in case we want to go back to this method)\n\t\n\t\t\t// window.setTimeout(function(){\n\t\t\t// \tvar displays = $('.studentLocationDisplay');\n\t\n\t\t\t// \tvar heights = displays.map(function() {\n\t\t\t// \t\treturn $(this).height()\n\t\t\t// \t});\n\t\n\t\t\t// \tvar maxHeight = Math.max.apply(null, heights);\n\t\n\t\t\t// \tdisplays.height(maxHeight);\n\t\t\t// }, 500);\n\t\t\t\n\t\t});\n\t\n\t\t// All absent event handler\n\t\t$('.all-absent').on('click', function() {\n\t\t\t$.ajax('/api/user/bulk', { \n\t\t\t\ttype: 'PUT',\n\t\t\t\tcontentType: 'application/json',\n\t\t\t\tdata: JSON.stringify({ absent: true })\n\t\t\t});\n\t\t});\n\t\t\n\t});\n\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** StudentTracker.js\n **/","// Requires\n\nvar _ = require('lodash');\nvar moment = require('moment');\nvar $ = require('jquery');\n\n// Globals\n\nvar studentsArray = [];\nvar FILTER = 'All'\nfunction sortByNameAndStatus(a, b) {\n\tvar an = $(a).attr('data-name'), bn = $(b).attr('data-name');\n\n\treturn $(b).hasClass('Found') - $(a).hasClass('Found') || (an > bn) - 1 || 1; \n};\n\n// Class of student display\nvar StudentLocationDisplay = function(student) {\n\tthis.data = _.pick(student, ['_id', 'email','name','image','googleId', 'absent']);\n\t\n\t// Create the DOM element representing the student\n\tvar display = $('<div>').addClass('studentLocationDisplay').addClass('col-md-2').attr('id', student.googleId).attr('data-name', student.name);\n\tvar container = $('<div>').addClass('nameImageContainer');\n\tvar absentToggle = $('<button>').addClass('btn btn-xs btn-primary absent-toggle').text( student.absent ? 'Present' : 'Absent');\n\n\tvar toggle = $('<div>').append(absentToggle);\n\n\tvar info = $('<div>').addClass('studentInfoContainer')\n\n\tcontainer\n\t\t.append('<div class=\"name\">' + student.name + '</div>')\n\t\t.append('<div><img class=\"studentImage\" src=\"' +student.image+'\"></div>');\n\n\tdisplay.append( container ).append( info ).append( toggle );\n\t\n\tabsentToggle.on('click', this.toggleAbsent.bind(this));\n\n\tthis.el = display;\n\n\t// If student is absent, no need to mess with any of the below data\n\tif (student.absent) {\n\t\tthis.status = 'Absent';\n\t\tthis.updateDisplay();\n\t}\n\t// Look at the student's recent scan to determine if they are in the correct place or not\n\telse if (student.recentScan) {\n\t\tscan = student.recentScan;\n\t\tthis.recentScan = scan;\n\t\t// First, check if the scan is recent (i.e. if that event is still ongoing)\n\t\tvar recent = false;\n\t\tvar event = scan.event ? scan.event[0] : undefined;\n\n\t\t// If google event, check against event end\n\t\tif (event && event.end && moment(event.end).add(TRANSITION_LENGTH, 'ms').isAfter(moment())) {\n\t\t\trecent = true;\n\t\t}\n\t\t// If grove calendar, check against length of events\n\t\telse if (event && !event.end && moment(scan.time).add(EVENT_LENGTH - TRANSITION_LENGTH, 'ms').isAfter(moment())) {\n\t\t\trecent = true;\n\t\t}\n\n\t\t// If the scan is recent\n\t\tif (recent) {\n\t\t\tthis.moveMe(scan);\n\t\t} \n\t\t// If the scan is not recent, student is lost\n\t\telse {\n\t\t\tthis.status = 'Lost';\n\t\t\tthis.updateDisplay();\n\t\t}\n\t} \n\t// If there is no recent scan at all, student is lost\n\telse {\n\t\tthis.status = 'Lost';\n\t\tthis.updateDisplay();\n\t}\n\n};\n\n// Toggles absent / present status\nStudentLocationDisplay.prototype.toggleAbsent = function(e) {\n\te.preventDefault();\n\n\tthis.status = this.status === 'Absent' ? 'Lost' : 'Absent';\n\n\tvar self = this;\n\n\t$.post( '/api/user/', { id: this.data.googleId, absent: !this.data.absent }, self.updateDisplay.bind(self) );\n}\n\n// Updates student display based on most recent scan / event \nStudentLocationDisplay.prototype.updateDisplay = function() {\n\n\tif (this.status != 'Absent') {\n\t\tthis.el.find('.absent-toggle').text('Absent');\n\t}\n\n\tif (this.status === 'Found') {\n\t\tvar scannedEvent = this.recentScan.event[0];\n\t\tvar text = _.chain(['summary', 'activity', 'focus_area'])\n\t\t\t.map(function(key) {\n\t\t\t\treturn scannedEvent[key];\n\t\t\t})\n\t\t\t.filter()\n\t\t\t.join(' | ')\n\t\t\t.value()\n\n\t\tvar info = $('<p>').addClass('last-scan-info').addClass('text-primary').text(text);\n\n\t\tthis.el.find('.studentInfoContainer').empty().append(info);\n\t\tthis.el.removeClass('Lost').addClass('Found');\n\t\tthis.render();\n\t}\n\t// If the student is lost, do not display the last scan information\n\telse if (this.status === 'Lost') {\n\t\tvar self = this;\n\n\t\t// Call the API endpoint to get current event without a scan\n\t\t$.get('/current-event/' + this.data.googleId, function(result) {\n\t\t\tself.el.removeClass('Found').addClass('Lost');\n\t\t\t\n\t\t\tvar correction = $('<p>').addClass('correct-location-info').addClass('text-primary').text(result.location);\n\t\t\tself.el.find('.studentInfoContainer').empty().append(correction);\n\t\t\tself.currentLocation = result && result.location || 'No Event';\n\n\t\t\tself.render()\n\t\t\t\n\t\t});\n\t} else if (this.status === 'Absent') {\n\t\tthis.el.removeClass('Found').addClass('Lost');\n\t\tthis.currentLocation = 'Absent';\n\t\tthis.el.find('.absent-toggle').text('Present');\n\t\tthis.render()\n\t}\n};\n\nStudentLocationDisplay.prototype.render = function() {\n\t// render into the dom based on where their location is\n\tvar locationId = this.currentLocation.split(' ').join('');\n\tvar location = $('#'+locationId)\n\tlocation.append(this.el);\n\n\tvar locationArray = location.find('.studentLocationDisplay').sort( sortByNameAndStatus );\n\n\tlocationArray.detach().appendTo( location );\n\n\t// Re-attach the absent click handler, was getting a strange bug where it did not always fire otherwise\n\tthis.el.find('.absent-toggle').off('click').on('click', this.toggleAbsent.bind(this) )\n};\n\n// Move the student to a new location based on the most recent scan\nStudentLocationDisplay.prototype.moveMe = function(scan) {\n\n\tvar self = this;\n\n\t// move from one array to another\n\tif (this.el) {\n\t\tthis.el.remove();\n\t};\n\n\t// If this method was triggered by a scan, update the location to the location of the scan. If it was triggered by a timeout, leave the location as is.\n\tif (scan) {\n\t\tthis.currentLocation = scan.scannedLocation;\n\t}\n\n\tif (scan && scan.correct) {\n\t\tthis.status = 'Found';\n\t\t// Set a timeout based on the end of the event, and move the student to Lost after the event is over as a placeholder until they scan into another event\n\n\t\tvar now = moment( new Date() );\n\t\t\n\t\tif (scan.event.end) {\n\t\t\tvar difference = moment(scan.event.end).subtract( TRANSITION_LENGTH, 'ms').diff( now );\n\t\t}\n\t\telse {\n\t\t\t/* Split the hour based on EVENT_LENGTH and TRANSITION_LENGTH\n\t\t    e.g. if events go for 15 with 5 min transition, 8:55 - 9:10 would\n\t\t    be the period during which the timeout would be set for 9:10 */\n\t\t    var intervals = 60 / (EVENT_LENGTH / (60 * 1000)) + 1;\n\t\t    var start_times = [];\n\t\t    for (var i =0; i < intervals; i++) {\n\t\t      start_times.push( moment( new Date() ).startOf('hour').add(i * EVENT_LENGTH - TRANSITION_LENGTH, 'ms'));\n\t\t    }\n\n\t\t    var event_end = _.find(start_times, function(t) {\n\t\t        return now.isBetween( t, moment(t).add( EVENT_LENGTH, 'ms' ) );\n\t\t    }).add(EVENT_LENGTH, 'ms');\n\n\t\t\t// Push student into lost after event ends and transition time has lapsed\n\t\t\tvar difference = event_end.diff(now);\n\t\t}\n\n\t\tthis.transitionTimeout = window.setTimeout( self.moveMe.bind(self, null), difference);\n\t}\n\t// If the scan does not match the location, the student is in the wrong location\n\telse if (scan) {\n\t\tthis.status = 'Lost';\n\t}\n\t// If there is no scan, this method is being triggered by the timeout, meaning the student has not scanned in to anywhere on time and is lost\n\t// We need to get the student's next event and move them accordingly\n\telse {\n\t\tthis.status = 'Lost';\n\t\tthis.recentScan = null;\n\t}\n\n\t// Now updateDisplay\n\tself.updateDisplay();\n};\n\n// When receiving a scan, find the student that matches the scan, move them to a new location based on the scan and clear any possible transitions\nfunction scanReceived(scan) {\n\n\tvar scanStudent = _.find(studentsArray, function(student) {\n\t\treturn student.data.googleId === scan.googleId;\n\t});\n\n\t// If a student is found, move the student and override their recent scan\n\tif (scanStudent) {\n\t\tif (scanStudent.transitionTimeout) { window.clearTimeout(scanStudent.transitionTimeout); }\n\t\tscanStudent.recentScan = scan;\n\t\t// Call the moveMe function, making sure it is bound to the current student\n\t\tscanStudent.moveMe.call(scanStudent, scan);\n\t}\n}\n\n$(function(){\n\t// Load the different button filters and divs\n\t_.keys(LOCATION_IMAGES).concat('Absent').forEach( function(location) {\n\t\t// Manual override for iPad Center to avoid sentence casing\n\t\tif (location.toLowerCase() === 'ipad center') {\n\t\t\tvar prettyDisplay = 'iPad Center';\n\t\t} else {\n\t\t\tvar prettyDisplay = location.split(' ').map( function(word) {\n\t\t\t\treturn word[0].toUpperCase() + word.slice(1);\n\t\t\t}).join(' ');\n\t\t}\n\n\t\t// Create the button and add it to button group\n\t\tvar button = $('<button>').addClass('btn btn-info btn-block').text(prettyDisplay);\n\t\tvar listItem = $('<li>').append(button);\n\t\t$('#location-filters').append(listItem);\n\n\t\t// Create the container for the students\n\t\t// Title is just the location, the container id needs to have spaces removed\n\t\tvar title = $('<h3>').text(prettyDisplay);\n\t\tvar container = $('<div>').addClass('row').attr('id', prettyDisplay.split(' ').join('')).append(title);\n\t\t$('#locations-container').append(container);\n\t});\n\n\t// Attach event handler to the filter buttons\n\t$('#location-filters button').click(function(e) {\n\t\t\n\t\t// Set filter\n\t\tFILTER = $(this).text();\n\n\t\t// Update display\n\t\tif (FILTER === 'All') {\n\t\t\t$('#locations-container > div').show();\n\t\t}\n\t\telse {\n\t\t\t// First, hide all containers\n\t\t\t$('#locations-container > div').hide();\n\n\t\t\t// Then show just the one with id matching the filter (spaces removed from filter)\n\t\t\t$('#' + FILTER.split(' ').join('')).show();\n\t\t}\n\n\t\t// Update the display of the filter buttons by removing primary from all and adding it to this one\n\t\t$('#location-filters button.btn-warning').removeClass('btn-warning').addClass('btn-info');\n\t\t$(this).removeClass('btn-info').addClass('btn-warning');\n\t});\n\n\t// Get AJAX call to User database and get all the students, create StudentLocationDisplay objects for each, and put them in the students array\n\tvar tracker = io.connect();\n\ttracker.on('SCAN!', scanReceived );\n\t\n\t$.get('api/user', function(students) {\n\t\tstudentsArray = _.map(students, function(student) {\n\t\t\treturn new StudentLocationDisplay(student);\n\t\t});\n\t\t\n\t\t// Put in a slight delay for student panels to display, then set them all to same height (don't need this with css changes, but keeping it in case we want to go back to this method)\n\n\t\t// window.setTimeout(function(){\n\t\t// \tvar displays = $('.studentLocationDisplay');\n\n\t\t// \tvar heights = displays.map(function() {\n\t\t// \t\treturn $(this).height()\n\t\t// \t});\n\n\t\t// \tvar maxHeight = Math.max.apply(null, heights);\n\n\t\t// \tdisplays.height(maxHeight);\n\t\t// }, 500);\n\t\t\n\t});\n\n\t// All absent event handler\n\t$('.all-absent').on('click', function() {\n\t\t$.ajax('/api/user/bulk', { \n\t\t\ttype: 'PUT',\n\t\t\tcontentType: 'application/json',\n\t\t\tdata: JSON.stringify({ absent: true })\n\t\t});\n\t});\n\t\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./public/js/lost-kids.js\n ** module id = 0\n ** module chunks = 2\n **/"],"sourceRoot":""}