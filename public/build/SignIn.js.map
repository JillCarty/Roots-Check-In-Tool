{"version":3,"sources":["webpack:///./public/js/signin.js"],"names":[],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,IAAG;AACH,4B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA,UAAS;AACT;AACA,U;;AAEA,6DAA4D;AAC5D,wDAAuD;AACvD,gDAA+C;AAC/C;AACA,MAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA,iCAAgC,mBAAmB;AACnD;AACA;AACA;AACA,YAAW;AACX;AACA;AACA;AACA,UAAS;AACT;;AAEA;;AAEA;AACA,IAAG;AACH;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;;AAGT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,U;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAwB,eAAe;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAW;;AAEX;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,IAAG;AACH,IAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SignIn.js","sourcesContent":["// Requires\n\nvar _ = require('lodash');\nvar moment = require('moment');\nvar $ = require('jquery');\nrequire('jquery.countdown');\n\n// Renders the progress bar at the top of page, using the start time of the student's next (or current) event.\nrenderProgressBar = function(eventStart){\n\n  $('.countDown').show();\n  var currentTime = moment( new Date() );\n\n  if (eventStart && currentTime.isAfter( eventStart ) ) {\n    return null;\n  } else {\n    $('.timer').countDown({  \n      start_time: currentTime, //Time when the progress bar is at 0%\n      end_time: eventStart || currentTime.add(1, 'ms'), //Time Progress bar is at 100% and timer runs out, when no eventStart is passed for end_time, use current time with 1 added ms to trigger onComplete and update_progress\n      progress: $('.progress-bar'), //There dom element which should display the progressbar.\n      onComplete: function() {\n        $('.timer').show();\n        $('.timer').replaceWith(\"<div class=\\\"timer ended\\\">Time's Up!</div>\");\n      },\n      update_progress : function(progress, element){\n        if (Math.floor(progress) === 50) {\n          $(element).removeClass('progress-bar-success').addClass('progress-bar-warning');\n        } else if (Math.floor(progress) === 75) {\n          $(element).removeClass('progress-bar-warning').addClass('progress-bar-danger');\n        } \n\n        element.attr('aria-valuenow', Math.floor(progress));//We set a custom attribute, 'area-valuenow' containing the progress\n        element.css('width', Math.floor(progress)+'%');//Fill the bar with percentage of progress\n        element.text(Math.floor(progress)+'%');//Put text notation of progress inside the progressbar\n      }\n    });\n  }\n}\n\n// Render a location image\nrenderLocationImage = function(eventLocation, eventActivity, eventCreator, focusArea) {\n\n  if (eventLocation) {\n    $('#locationImage').append( LOCATION_IMAGES[eventLocation.toLowerCase()] );\n    $('#locationText').append(eventLocation);\n  }\n\n  // Check if the event activity has an icon, otherwise it is a description and use GET_ACTIVITY\n  if (eventActivity && ACTIVITY_IMAGES[eventActivity.toLowerCase()]) {\n    $('#activityImage').append( ACTIVITY_IMAGES[eventActivity.toLowerCase()] );\n  } else {\n    $('#activityImage').append( GET_ACTIVITY(eventActivity) );\n  }\n\n  $('#activityText').append(eventActivity || '');\n\n  if (eventCreator) {\n    $('#creatorImage').append( CREATOR_IMAGES[eventCreator] );\n //   $('#creatorText').append(eventCreator);\n  } else if (focusArea) {\n    $('#creatorImage').append( FOCUS_AREAS[focusArea] );\n    $('#creatorText').append(focusArea);\n  }\n}\n\n// Render the grove calendar.\nrenderGroveCalendar = function(numEvents, userData) {\n   $.get('/api/grove/' + userData.id, function(calendar) {\n      window.eventData.groveCalendar = calendar;\n      var nextEventIndex = _.findIndex(calendar, function(event) {\n        return !event.checkedIn;\n      });\n\n      // If there's not a next event, then the student has finished their calendar, in which case uncheck all events and start at the top\n      if (nextEventIndex === -1) {\n        nextEventIndex = 0;\n        calendar = _.map(calendar, function(e) {\n          e.checkedIn = false;\n          return e;\n        });\n\n        // Save the new calendar\n        $.ajax('/api/grove/' + userData.id, {\n          method: 'PUT',\n          data: JSON.stringify({calendar: calendar}),\n          contentType: 'application/json',\n          success: function() {\n            // Do we need to do anything here?\n          },\n          error: function(xhr, text, error) {\n            // Do we need to do anything here?\n          }\n        });\n      }\n      \n      var nextEvent = calendar[nextEventIndex];\n\n      if (nextEvent) renderLocationImage(nextEvent.location, nextEvent.activity, null, nextEvent.focus_area);\n  });\n}\n\ngetCalendar = function(userData){\n\n  // Start and end times for calendar\n  var start = moment().startOf('day').toISOString();\n  var end = moment().endOf('day').toISOString();\n\n  //get users google calendar events starting with today\n  gapi.client.request('https://www.googleapis.com/calendar/v3/calendars/' + userData.email + '/events/?singleEvents=true&timeMin=' + start + '&timeMax=' + end + '&orderBy=startTime').execute(function(response) {\n\n        var currentTime = moment( new Date() );\n\n        //loop through all events in user's google calendar\n        var events = _.map(response.items, function(event){\n\n          //return events in this format\n          return {\n              eventId: event.id,\n              location: event.location,\n              creator: event.creator.displayName || event.creator.email,\n              start: event.start.dateTime,\n              end: event.end.dateTime,\n              description: event.description,\n              summary: event.summary\n            };\n        });\n\n\n        //push all events objects in users calendar\n        userData.calendar = events;\n\n        window.userData = userData;\n\n        //send user data with calendar events to backend, and save to database\n        $.ajax ({\n          type: \"POST\",\n          url: 'api/user',\n          data: JSON.stringify(userData),\n          contentType: 'application/json'\n        });\n        \n        /* loop through all events to find one that is no more than TRANSITION_LENGTH away,\n        e.g. if it is 9:52 right now, an event that starts at 9:55 would be next, but an event that starts at 10:00 would not, if 5 min transition time */\n        var nextEvent = _.find(events, function(event){\n          var a = currentTime;\n          var b = moment(event.start);\n          var difference = b.diff(a, 'ms');\n          return (difference <= TRANSITION_LENGTH && difference > 0);\n        });\n\n        // Check to see if there's an event currently happening that the student is late for or is checking into the app before the event is done\n        var currentEvent = _.find(events, function(event) {\n          var end = moment( event.end ).subtract(TRANSITION_LENGTH, 'ms' );\n          return currentTime.isBetween(event.start, end );\n        });\n\n        window.eventData = {\n          currentEvent: currentEvent,\n          nextEvent: nextEvent\n        };\n\n        //if a current event is found, show location, teacher, and activity. \n        if (currentEvent) {\n          // Render location for current event\n          renderLocationImage(currentEvent.location, currentEvent.summary, currentEvent.creator);\n\n          // Render progress bar as full by not passing start time\n          renderProgressBar();\n        } \n        // If there's not a current event, show the next event\n        else if (nextEvent) {\n\n          //pass event start time to renderProgressBar\n          renderProgressBar(nextEvent.start);\n\n          renderLocationImage(nextEvent.location, nextEvent.summary, nextEvent.creator);\n        }\n        // If nothing came back from the google calendar, render the next grove calendar event\n        else {\n          /* Split the hour based on EVENT_LENGTH and TRANSITION_LENGTH\n          e.g. if events go for 15 with 5 min transition, 8:55 - 9:10 would\n          be the period during which we would show a student that an event\n          is starting at 9:00 */\n          var intervals = 60 / (EVENT_LENGTH / (60 * 1000)) + 1;\n          var start_times = [];\n          for (var i =0; i < intervals; i++) {\n            // Remember to use new moment object here for each iteration so as not to override currentTime\n            start_times.push( moment( new Date() ).startOf('hour').add(i * EVENT_LENGTH - TRANSITION_LENGTH, 'ms'));\n          }\n\n          // Event starts at the first start time after this check-in period\n          var event_start = _.find(start_times, function(t) {\n            return currentTime.isBetween( t, moment(t).add( EVENT_LENGTH, 'ms' ) );\n          }).add(TRANSITION_LENGTH, 'ms');\n\n          // Now render the progress bar and grove calendar with 1 event\n          renderProgressBar( event_start );\n          renderGroveCalendar(1, userData);\n        }\n  });\n}\n\nsigninCallback = function(authResult) {\n  if (authResult['status']['signed_in']) {\n\n    // Update the app to reflect a signed in user\n    // Hide the sign-in button now that the user is authorized, and show the container\n    $('#signinButton').hide();\n    $('#main-container').show()\n\n    //make call to google profile for users account information\n    gapi.client.request('https://www.googleapis.com/plus/v1/people/me?fields=name(familyName%2Cformatted%2CgivenName)%2CdisplayName%2Cemails%2Fvalue%2Cimage%2Furl%2Cid').execute(function(response) {\n\n      var signInData = {\n        id: response.id,\n        name: response.displayName,\n        email: response.emails[0].value,\n        image: response.image.url\n      }\n\n      // Now that we have the ID of the student that signed in, listen for any scans from that student and close this window on scan\n      var handleScan = function(scan) {\n        if (scan.googleId === response.id) {\n          window.close();\n        }\n      };\n\n      var tracker = io.connect();\n      tracker.on('SCAN!', handleScan);\n\n      $('#name').append('<h2>' + response.displayName + '\\'s Next Step</h2>');\n      \n      //add google id to scan href/link. that way when scan returns scanned_data we have the users id\n      $('#scan-button').attr('href', 'scan://scan?callback=https%3A%2F%2Froots-elementary.herokuapp.com/scanredirect/'+response.id);\n\n      //get calendar events on signIn and send events/user to database in function above\n      $('.scan-button').show();\n      getCalendar(signInData);\n\n  });\n  } else {\n    // Update the app to reflect a signed out user\n    // Possible error values:\n    //   \"user_signed_out\" - User is signed-out\n    //   \"access_denied\" - User denied access to your app\n    //   \"immediate_failed\" - Could not automatically log in the user\n    console.log('Sign-in state: ' + authResult['error']);\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./public/js/signin.js\n ** module id = 0\n ** module chunks = 1\n **/"],"sourceRoot":""}