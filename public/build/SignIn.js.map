{"version":3,"sources":["webpack:///SignIn.js","webpack:///./public/js/signin.js"],"names":["webpackJsonp","module","exports","__webpack_require__","_","moment","$","renderProgressBar","eventStart","show","currentTime","Date","isAfter","countDown","start_time","end_time","add","progress","onComplete","replaceWith","update_progress","element","Math","floor","removeClass","addClass","attr","css","text","renderLocationImage","eventLocation","eventActivity","eventCreator","focusArea","append","LOCATION_IMAGES","toLowerCase","ACTIVITY_IMAGES","GET_ACTIVITY","CREATOR_IMAGES","FOCUS_AREAS","renderGroveCalendar","numEvents","userData","get","id","calendar","window","eventData","groveCalendar","nextEventIndex","findIndex","event","checkedIn","map","e","ajax","method","data","JSON","stringify","contentType","success","error","xhr","nextEvent","location","activity","focus_area","getCalendar","start","startOf","toISOString","end","endOf","gapi","client","request","email","execute","response","events","items","eventId","creator","displayName","dateTime","description","summary","type","url","find","a","b","difference","diff","TRANSITION_LENGTH","currentEvent","subtract","isBetween","intervals","EVENT_LENGTH","start_times","i","push","event_start","t","signinCallback","authResult","hide","signInData","name","emails","value","image","handleScan","scan","googleId","close","tracker","io","connect","on","console","log"],"mappings":"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","file":"SignIn.js","sourcesContent":["webpackJsonp([1],[\n/* 0 */\n/*!*****************************!*\\\n  !*** ./public/js/signin.js ***!\n  \\*****************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Requires\n\t\n\tvar _ = __webpack_require__(/*! lodash */ 1);\n\tvar moment = __webpack_require__(/*! moment */ 3);\n\tvar $ = __webpack_require__(/*! jquery */ 90);\n\t__webpack_require__(/*! jquery.countdown */ 106);\n\t\n\t// Renders the progress bar at the top of page, using the start time of the student's next (or current) event.\n\trenderProgressBar = function(eventStart){\n\t\n\t  $('.countDown').show();\n\t  var currentTime = moment( new Date() );\n\t\n\t  if (eventStart && currentTime.isAfter( eventStart ) ) {\n\t    return null;\n\t  } else {\n\t    $('.timer').countDown({  \n\t      start_time: currentTime, //Time when the progress bar is at 0%\n\t      end_time: eventStart || currentTime.add(1, 'ms'), //Time Progress bar is at 100% and timer runs out, when no eventStart is passed for end_time, use current time with 1 added ms to trigger onComplete and update_progress\n\t      progress: $('.progress-bar'), //There dom element which should display the progressbar.\n\t      onComplete: function() {\n\t        $('.timer').show();\n\t        $('.timer').replaceWith(\"<div class=\\\"timer ended\\\">Time's Up!</div>\");\n\t      },\n\t      update_progress : function(progress, element){\n\t        if (Math.floor(progress) === 50) {\n\t          $(element).removeClass('progress-bar-success').addClass('progress-bar-warning');\n\t        } else if (Math.floor(progress) === 75) {\n\t          $(element).removeClass('progress-bar-warning').addClass('progress-bar-danger');\n\t        } \n\t\n\t        element.attr('aria-valuenow', Math.floor(progress));//We set a custom attribute, 'area-valuenow' containing the progress\n\t        element.css('width', Math.floor(progress)+'%');//Fill the bar with percentage of progress\n\t        element.text(Math.floor(progress)+'%');//Put text notation of progress inside the progressbar\n\t      }\n\t    });\n\t  }\n\t}\n\t\n\t// Render a location image\n\trenderLocationImage = function(eventLocation, eventActivity, eventCreator, focusArea) {\n\t\n\t  if (eventLocation) {\n\t    $('#locationImage').append( LOCATION_IMAGES[eventLocation.toLowerCase()] );\n\t    $('#locationText').append(eventLocation);\n\t  }\n\t\n\t  // Check if the event activity has an icon, otherwise it is a description and use GET_ACTIVITY\n\t  if (eventActivity && ACTIVITY_IMAGES[eventActivity.toLowerCase()]) {\n\t    $('#activityImage').append( ACTIVITY_IMAGES[eventActivity.toLowerCase()] );\n\t  } else {\n\t    $('#activityImage').append( GET_ACTIVITY(eventActivity) );\n\t  }\n\t\n\t  $('#activityText').append(eventActivity || '');\n\t\n\t  if (eventCreator) {\n\t    $('#creatorImage').append( CREATOR_IMAGES[eventCreator] );\n\t //   $('#creatorText').append(eventCreator);\n\t  } else if (focusArea) {\n\t    $('#creatorImage').append( FOCUS_AREAS[focusArea] );\n\t    $('#creatorText').append(focusArea);\n\t  }\n\t}\n\t\n\t// Render the grove calendar.\n\trenderGroveCalendar = function(numEvents, userData) {\n\t   $.get('/api/grove/' + userData.id, function(calendar) {\n\t      window.eventData.groveCalendar = calendar;\n\t      var nextEventIndex = _.findIndex(calendar, function(event) {\n\t        return !event.checkedIn;\n\t      });\n\t\n\t      // If there's not a next event, then the student has finished their calendar, in which case uncheck all events and start at the top\n\t      if (nextEventIndex === -1) {\n\t        nextEventIndex = 0;\n\t        calendar = _.map(calendar, function(e) {\n\t          e.checkedIn = false;\n\t          return e;\n\t        });\n\t\n\t        // Save the new calendar\n\t        $.ajax('/api/grove/' + userData.id, {\n\t          method: 'PUT',\n\t          data: JSON.stringify({calendar: calendar}),\n\t          contentType: 'application/json',\n\t          success: function() {\n\t            // Do we need to do anything here?\n\t          },\n\t          error: function(xhr, text, error) {\n\t            // Do we need to do anything here?\n\t          }\n\t        });\n\t      }\n\t      \n\t      var nextEvent = calendar[nextEventIndex];\n\t\n\t      if (nextEvent) renderLocationImage(nextEvent.location, nextEvent.activity, null, nextEvent.focus_area);\n\t  });\n\t}\n\t\n\tgetCalendar = function(userData){\n\t\n\t  // Start and end times for calendar\n\t  var start = moment().startOf('day').toISOString();\n\t  var end = moment().endOf('day').toISOString();\n\t\n\t  //get users google calendar events starting with today\n\t  gapi.client.request('https://www.googleapis.com/calendar/v3/calendars/' + userData.email + '/events/?singleEvents=true&timeMin=' + start + '&timeMax=' + end + '&orderBy=startTime').execute(function(response) {\n\t\n\t        var currentTime = moment( new Date() );\n\t\n\t        //loop through all events in user's google calendar\n\t        var events = _.map(response.items, function(event){\n\t\n\t          //return events in this format\n\t          return {\n\t              eventId: event.id,\n\t              location: event.location,\n\t              creator: event.creator.displayName || event.creator.email,\n\t              start: event.start.dateTime,\n\t              end: event.end.dateTime,\n\t              description: event.description,\n\t              summary: event.summary\n\t            };\n\t        });\n\t\n\t\n\t        //push all events objects in users calendar\n\t        userData.calendar = events;\n\t\n\t        window.userData = userData;\n\t\n\t        //send user data with calendar events to backend, and save to database\n\t        $.ajax ({\n\t          type: \"POST\",\n\t          url: 'api/user',\n\t          data: JSON.stringify(userData),\n\t          contentType: 'application/json'\n\t        });\n\t        \n\t        /* loop through all events to find one that is no more than TRANSITION_LENGTH away,\n\t        e.g. if it is 9:52 right now, an event that starts at 9:55 would be next, but an event that starts at 10:00 would not, if 5 min transition time */\n\t        var nextEvent = _.find(events, function(event){\n\t          var a = currentTime;\n\t          var b = moment(event.start);\n\t          var difference = b.diff(a, 'ms');\n\t          return (difference <= TRANSITION_LENGTH && difference > 0);\n\t        });\n\t\n\t        // Check to see if there's an event currently happening that the student is late for or is checking into the app before the event is done\n\t        var currentEvent = _.find(events, function(event) {\n\t          var end = moment( event.end ).subtract(TRANSITION_LENGTH, 'ms' );\n\t          return currentTime.isBetween(event.start, end );\n\t        });\n\t\n\t        window.eventData = {\n\t          currentEvent: currentEvent,\n\t          nextEvent: nextEvent\n\t        };\n\t\n\t        //if a current event is found, show location, teacher, and activity. \n\t        if (currentEvent) {\n\t          // Render location for current event\n\t          renderLocationImage(currentEvent.location, currentEvent.summary, currentEvent.creator);\n\t\n\t          // Render progress bar as full by not passing start time\n\t          renderProgressBar();\n\t        } \n\t        // If there's not a current event, show the next event\n\t        else if (nextEvent) {\n\t\n\t          //pass event start time to renderProgressBar\n\t          renderProgressBar(nextEvent.start);\n\t\n\t          renderLocationImage(nextEvent.location, nextEvent.summary, nextEvent.creator);\n\t        }\n\t        // If nothing came back from the google calendar, render the next grove calendar event\n\t        else {\n\t          /* Split the hour based on EVENT_LENGTH and TRANSITION_LENGTH\n\t          e.g. if events go for 15 with 5 min transition, 8:55 - 9:10 would\n\t          be the period during which we would show a student that an event\n\t          is starting at 9:00 */\n\t          var intervals = 60 / (EVENT_LENGTH / (60 * 1000)) + 1;\n\t          var start_times = [];\n\t          for (var i =0; i < intervals; i++) {\n\t            // Remember to use new moment object here for each iteration so as not to override currentTime\n\t            start_times.push( moment( new Date() ).startOf('hour').add(i * EVENT_LENGTH - TRANSITION_LENGTH, 'ms'));\n\t          }\n\t\n\t          // Event starts at the first start time after this check-in period\n\t          var event_start = _.find(start_times, function(t) {\n\t            return currentTime.isBetween( t, moment(t).add( EVENT_LENGTH, 'ms' ) );\n\t          }).add(TRANSITION_LENGTH, 'ms');\n\t\n\t          // Now render the progress bar and grove calendar with 1 event\n\t          renderProgressBar( event_start );\n\t          renderGroveCalendar(1, userData);\n\t        }\n\t  });\n\t}\n\t\n\tsigninCallback = function(authResult) {\n\t  if (authResult['status']['signed_in']) {\n\t\n\t    // Update the app to reflect a signed in user\n\t    // Hide the sign-in button now that the user is authorized, and show the container\n\t    $('#signinButton').hide();\n\t    $('#main-container').show()\n\t\n\t    //make call to google profile for users account information\n\t    gapi.client.request('https://www.googleapis.com/plus/v1/people/me?fields=name(familyName%2Cformatted%2CgivenName)%2CdisplayName%2Cemails%2Fvalue%2Cimage%2Furl%2Cid').execute(function(response) {\n\t\n\t      var signInData = {\n\t        id: response.id,\n\t        name: response.displayName,\n\t        email: response.emails[0].value,\n\t        image: response.image.url\n\t      }\n\t\n\t      // Now that we have the ID of the student that signed in, listen for any scans from that student and close this window on scan\n\t      var handleScan = function(scan) {\n\t        if (scan.googleId === response.id) {\n\t          window.close();\n\t        }\n\t      };\n\t\n\t      var tracker = io.connect();\n\t      tracker.on('SCAN!', handleScan);\n\t\n\t      $('#name').append('<h2>' + response.displayName + '\\'s Next Step</h2>');\n\t      \n\t      //add google id to scan href/link. that way when scan returns scanned_data we have the users id\n\t      $('#scan-button').attr('href', 'scan://scan?callback=https%3A%2F%2Froots-elementary.herokuapp.com/scanredirect/'+response.id);\n\t\n\t      //get calendar events on signIn and send events/user to database in function above\n\t      $('.scan-button').show();\n\t      getCalendar(signInData);\n\t\n\t  });\n\t  } else {\n\t    // Update the app to reflect a signed out user\n\t    // Possible error values:\n\t    //   \"user_signed_out\" - User is signed-out\n\t    //   \"access_denied\" - User denied access to your app\n\t    //   \"immediate_failed\" - Could not automatically log in the user\n\t    console.log('Sign-in state: ' + authResult['error']);\n\t  }\n\t}\n\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** SignIn.js\n **/","// Requires\n\nvar _ = require('lodash');\nvar moment = require('moment');\nvar $ = require('jquery');\nrequire('jquery.countdown');\n\n// Renders the progress bar at the top of page, using the start time of the student's next (or current) event.\nrenderProgressBar = function(eventStart){\n\n  $('.countDown').show();\n  var currentTime = moment( new Date() );\n\n  if (eventStart && currentTime.isAfter( eventStart ) ) {\n    return null;\n  } else {\n    $('.timer').countDown({  \n      start_time: currentTime, //Time when the progress bar is at 0%\n      end_time: eventStart || currentTime.add(1, 'ms'), //Time Progress bar is at 100% and timer runs out, when no eventStart is passed for end_time, use current time with 1 added ms to trigger onComplete and update_progress\n      progress: $('.progress-bar'), //There dom element which should display the progressbar.\n      onComplete: function() {\n        $('.timer').show();\n        $('.timer').replaceWith(\"<div class=\\\"timer ended\\\">Time's Up!</div>\");\n      },\n      update_progress : function(progress, element){\n        if (Math.floor(progress) === 50) {\n          $(element).removeClass('progress-bar-success').addClass('progress-bar-warning');\n        } else if (Math.floor(progress) === 75) {\n          $(element).removeClass('progress-bar-warning').addClass('progress-bar-danger');\n        } \n\n        element.attr('aria-valuenow', Math.floor(progress));//We set a custom attribute, 'area-valuenow' containing the progress\n        element.css('width', Math.floor(progress)+'%');//Fill the bar with percentage of progress\n        element.text(Math.floor(progress)+'%');//Put text notation of progress inside the progressbar\n      }\n    });\n  }\n}\n\n// Render a location image\nrenderLocationImage = function(eventLocation, eventActivity, eventCreator, focusArea) {\n\n  if (eventLocation) {\n    $('#locationImage').append( LOCATION_IMAGES[eventLocation.toLowerCase()] );\n    $('#locationText').append(eventLocation);\n  }\n\n  // Check if the event activity has an icon, otherwise it is a description and use GET_ACTIVITY\n  if (eventActivity && ACTIVITY_IMAGES[eventActivity.toLowerCase()]) {\n    $('#activityImage').append( ACTIVITY_IMAGES[eventActivity.toLowerCase()] );\n  } else {\n    $('#activityImage').append( GET_ACTIVITY(eventActivity) );\n  }\n\n  $('#activityText').append(eventActivity || '');\n\n  if (eventCreator) {\n    $('#creatorImage').append( CREATOR_IMAGES[eventCreator] );\n //   $('#creatorText').append(eventCreator);\n  } else if (focusArea) {\n    $('#creatorImage').append( FOCUS_AREAS[focusArea] );\n    $('#creatorText').append(focusArea);\n  }\n}\n\n// Render the grove calendar.\nrenderGroveCalendar = function(numEvents, userData) {\n   $.get('/api/grove/' + userData.id, function(calendar) {\n      window.eventData.groveCalendar = calendar;\n      var nextEventIndex = _.findIndex(calendar, function(event) {\n        return !event.checkedIn;\n      });\n\n      // If there's not a next event, then the student has finished their calendar, in which case uncheck all events and start at the top\n      if (nextEventIndex === -1) {\n        nextEventIndex = 0;\n        calendar = _.map(calendar, function(e) {\n          e.checkedIn = false;\n          return e;\n        });\n\n        // Save the new calendar\n        $.ajax('/api/grove/' + userData.id, {\n          method: 'PUT',\n          data: JSON.stringify({calendar: calendar}),\n          contentType: 'application/json',\n          success: function() {\n            // Do we need to do anything here?\n          },\n          error: function(xhr, text, error) {\n            // Do we need to do anything here?\n          }\n        });\n      }\n      \n      var nextEvent = calendar[nextEventIndex];\n\n      if (nextEvent) renderLocationImage(nextEvent.location, nextEvent.activity, null, nextEvent.focus_area);\n  });\n}\n\ngetCalendar = function(userData){\n\n  // Start and end times for calendar\n  var start = moment().startOf('day').toISOString();\n  var end = moment().endOf('day').toISOString();\n\n  //get users google calendar events starting with today\n  gapi.client.request('https://www.googleapis.com/calendar/v3/calendars/' + userData.email + '/events/?singleEvents=true&timeMin=' + start + '&timeMax=' + end + '&orderBy=startTime').execute(function(response) {\n\n        var currentTime = moment( new Date() );\n\n        //loop through all events in user's google calendar\n        var events = _.map(response.items, function(event){\n\n          //return events in this format\n          return {\n              eventId: event.id,\n              location: event.location,\n              creator: event.creator.displayName || event.creator.email,\n              start: event.start.dateTime,\n              end: event.end.dateTime,\n              description: event.description,\n              summary: event.summary\n            };\n        });\n\n\n        //push all events objects in users calendar\n        userData.calendar = events;\n\n        window.userData = userData;\n\n        //send user data with calendar events to backend, and save to database\n        $.ajax ({\n          type: \"POST\",\n          url: 'api/user',\n          data: JSON.stringify(userData),\n          contentType: 'application/json'\n        });\n        \n        /* loop through all events to find one that is no more than TRANSITION_LENGTH away,\n        e.g. if it is 9:52 right now, an event that starts at 9:55 would be next, but an event that starts at 10:00 would not, if 5 min transition time */\n        var nextEvent = _.find(events, function(event){\n          var a = currentTime;\n          var b = moment(event.start);\n          var difference = b.diff(a, 'ms');\n          return (difference <= TRANSITION_LENGTH && difference > 0);\n        });\n\n        // Check to see if there's an event currently happening that the student is late for or is checking into the app before the event is done\n        var currentEvent = _.find(events, function(event) {\n          var end = moment( event.end ).subtract(TRANSITION_LENGTH, 'ms' );\n          return currentTime.isBetween(event.start, end );\n        });\n\n        window.eventData = {\n          currentEvent: currentEvent,\n          nextEvent: nextEvent\n        };\n\n        //if a current event is found, show location, teacher, and activity. \n        if (currentEvent) {\n          // Render location for current event\n          renderLocationImage(currentEvent.location, currentEvent.summary, currentEvent.creator);\n\n          // Render progress bar as full by not passing start time\n          renderProgressBar();\n        } \n        // If there's not a current event, show the next event\n        else if (nextEvent) {\n\n          //pass event start time to renderProgressBar\n          renderProgressBar(nextEvent.start);\n\n          renderLocationImage(nextEvent.location, nextEvent.summary, nextEvent.creator);\n        }\n        // If nothing came back from the google calendar, render the next grove calendar event\n        else {\n          /* Split the hour based on EVENT_LENGTH and TRANSITION_LENGTH\n          e.g. if events go for 15 with 5 min transition, 8:55 - 9:10 would\n          be the period during which we would show a student that an event\n          is starting at 9:00 */\n          var intervals = 60 / (EVENT_LENGTH / (60 * 1000)) + 1;\n          var start_times = [];\n          for (var i =0; i < intervals; i++) {\n            // Remember to use new moment object here for each iteration so as not to override currentTime\n            start_times.push( moment( new Date() ).startOf('hour').add(i * EVENT_LENGTH - TRANSITION_LENGTH, 'ms'));\n          }\n\n          // Event starts at the first start time after this check-in period\n          var event_start = _.find(start_times, function(t) {\n            return currentTime.isBetween( t, moment(t).add( EVENT_LENGTH, 'ms' ) );\n          }).add(TRANSITION_LENGTH, 'ms');\n\n          // Now render the progress bar and grove calendar with 1 event\n          renderProgressBar( event_start );\n          renderGroveCalendar(1, userData);\n        }\n  });\n}\n\nsigninCallback = function(authResult) {\n  if (authResult['status']['signed_in']) {\n\n    // Update the app to reflect a signed in user\n    // Hide the sign-in button now that the user is authorized, and show the container\n    $('#signinButton').hide();\n    $('#main-container').show()\n\n    //make call to google profile for users account information\n    gapi.client.request('https://www.googleapis.com/plus/v1/people/me?fields=name(familyName%2Cformatted%2CgivenName)%2CdisplayName%2Cemails%2Fvalue%2Cimage%2Furl%2Cid').execute(function(response) {\n\n      var signInData = {\n        id: response.id,\n        name: response.displayName,\n        email: response.emails[0].value,\n        image: response.image.url\n      }\n\n      // Now that we have the ID of the student that signed in, listen for any scans from that student and close this window on scan\n      var handleScan = function(scan) {\n        if (scan.googleId === response.id) {\n          window.close();\n        }\n      };\n\n      var tracker = io.connect();\n      tracker.on('SCAN!', handleScan);\n\n      $('#name').append('<h2>' + response.displayName + '\\'s Next Step</h2>');\n      \n      //add google id to scan href/link. that way when scan returns scanned_data we have the users id\n      $('#scan-button').attr('href', 'scan://scan?callback=https%3A%2F%2Froots-elementary.herokuapp.com/scanredirect/'+response.id);\n\n      //get calendar events on signIn and send events/user to database in function above\n      $('.scan-button').show();\n      getCalendar(signInData);\n\n  });\n  } else {\n    // Update the app to reflect a signed out user\n    // Possible error values:\n    //   \"user_signed_out\" - User is signed-out\n    //   \"access_denied\" - User denied access to your app\n    //   \"immediate_failed\" - Could not automatically log in the user\n    console.log('Sign-in state: ' + authResult['error']);\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./public/js/signin.js\n ** module id = 0\n ** module chunks = 1\n **/"],"sourceRoot":""}